// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Teste.Data;

#nullable disable

namespace Teste.Migrations
{
    [DbContext(typeof(FueDbContext))]
    [Migration("20250718213113_OitavaMigration")]
    partial class OitavaMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Teste.Models.Actividade", b =>
                {
                    b.Property<int>("ActividadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActividadeId"));

                    b.Property<string>("CodigoCAE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActividadeId");

                    b.ToTable("Actividades");
                });

            modelBuilder.Entity("Teste.Models.ActividadeEmpresa", b =>
                {
                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("ActividadeId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmpresaId", "ActividadeId");

                    b.HasIndex("ActividadeId");

                    b.ToTable("ActividadeEmpresas");
                });

            modelBuilder.Entity("Teste.Models.Bem", b =>
                {
                    b.Property<int>("BemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BemId"));

                    b.Property<string>("CodigoCNBS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BemId");

                    b.ToTable("Bens");
                });

            modelBuilder.Entity("Teste.Models.Contacto", b =>
                {
                    b.Property<int>("ContactoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactoID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SedeId")
                        .HasColumnType("int");

                    b.Property<string>("Telemovel1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telemovel2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telemovel3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactoID");

                    b.HasIndex("SedeId");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("Teste.Models.EmpresaBem", b =>
                {
                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("BemId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmpresaId", "BemId");

                    b.HasIndex("BemId");

                    b.ToTable("EmpresaBens");
                });

            modelBuilder.Entity("Teste.Models.Localizacao", b =>
                {
                    b.Property<int>("LocalizacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocalizacaoId"));

                    b.Property<string>("AvenidaRua")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Distrito")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocalizacaoId");

                    b.ToTable("Localizacoes");
                });

            modelBuilder.Entity("Teste.Models.Responsavel", b =>
                {
                    b.Property<int>("ResponsavelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponsavelId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Funcao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SucursalId")
                        .HasColumnType("int");

                    b.Property<string>("Telemovel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponsavelId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("SucursalId");

                    b.ToTable("Responsaveis");
                });

            modelBuilder.Entity("Teste.Models.Sede", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnoConstituicao")
                        .HasColumnType("int");

                    b.Property<int?>("DataInicioAno")
                        .HasColumnType("int");

                    b.Property<int?>("DataInicioMes")
                        .HasColumnType("int");

                    b.Property<string>("GrupoEmpresarial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocalizacaoId")
                        .HasColumnType("int");

                    b.Property<string>("NUIT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeGrupoEmpresarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumTrabalhadoresHomens")
                        .HasColumnType("int");

                    b.Property<int?>("NumTrabalhadoresMulheres")
                        .HasColumnType("int");

                    b.Property<string>("NumeroAlvara")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaisGrupoEmpresarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SituacaoActividade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEntidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocalizacaoId")
                        .IsUnique();

                    b.ToTable("Sedes");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Sucursal", b =>
                {
                    b.HasBaseType("Teste.Models.Sede");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Sucursais");
                });

            modelBuilder.Entity("Teste.Models.Empresa", b =>
                {
                    b.HasBaseType("Teste.Models.Sede");

                    b.Property<double>("CapitalPrivadoEstrangeiro")
                        .HasColumnType("float");

                    b.Property<double>("CapitalPrivadoNacional")
                        .HasColumnType("float");

                    b.Property<double>("CapitalSocial")
                        .HasColumnType("float");

                    b.Property<double>("CapitalSocialPublico")
                        .HasColumnType("float");

                    b.Property<double>("Despesas")
                        .HasColumnType("float");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("FormaJuridica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantidadeSucursalNoPais")
                        .HasColumnType("int");

                    b.Property<string>("SucursalNoPais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoContabilidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("VolumeNegocios")
                        .HasColumnType("float");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("Teste.Models.ActividadeEmpresa", b =>
                {
                    b.HasOne("Teste.Models.Actividade", "Actividade")
                        .WithMany()
                        .HasForeignKey("ActividadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teste.Models.Empresa", "Empresa")
                        .WithMany("Actividades")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actividade");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Teste.Models.Contacto", b =>
                {
                    b.HasOne("Teste.Models.Sede", "Sede")
                        .WithMany("Contactos")
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sede");
                });

            modelBuilder.Entity("Teste.Models.EmpresaBem", b =>
                {
                    b.HasOne("Teste.Models.Bem", "Bem")
                        .WithMany()
                        .HasForeignKey("BemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teste.Models.Empresa", "Empresa")
                        .WithMany("Bens")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bem");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Teste.Models.Responsavel", b =>
                {
                    b.HasOne("Teste.Models.Empresa", "Empresa")
                        .WithMany("Responsaveis")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sucursal", null)
                        .WithMany("Responsaveis")
                        .HasForeignKey("SucursalId");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Teste.Models.Sede", b =>
                {
                    b.HasOne("Teste.Models.Localizacao", "Localizacao")
                        .WithOne()
                        .HasForeignKey("Teste.Models.Sede", "LocalizacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Localizacao");
                });

            modelBuilder.Entity("Sucursal", b =>
                {
                    b.HasOne("Teste.Models.Empresa", "Empresa")
                        .WithMany("Sucursais")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Teste.Models.Sede", null)
                        .WithOne()
                        .HasForeignKey("Sucursal", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Teste.Models.Empresa", b =>
                {
                    b.HasOne("Teste.Models.Sede", null)
                        .WithOne()
                        .HasForeignKey("Teste.Models.Empresa", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Teste.Models.Sede", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("Sucursal", b =>
                {
                    b.Navigation("Responsaveis");
                });

            modelBuilder.Entity("Teste.Models.Empresa", b =>
                {
                    b.Navigation("Actividades");

                    b.Navigation("Bens");

                    b.Navigation("Responsaveis");

                    b.Navigation("Sucursais");
                });
#pragma warning restore 612, 618
        }
    }
}
